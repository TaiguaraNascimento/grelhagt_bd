
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// CRUDS básicos

model Usuarios {
  id                      String      @id @map("_id") @default(auto()) @db.ObjectId
  usuario                 String
  email                   String
  solicitante             Programacao[] @relation("solicitante")
  aprovador               Programacao[] @relation("aprovador")
}


model Users {
  id                      String      @id @map("_id") @default(auto()) @db.ObjectId
  usuario                 String
  email                   String      @unique
  senha                   String

  status                  Boolean

  profissionais           Profissionais           @relation(fields: [profissionaisId], references: [id])
  profissionaisId         String                  @db.ObjectId

  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  
}


model Filiais {
  id                      String      @id @map("_id") @default(auto()) @db.ObjectId
  nomeDaFilial            String      @unique
  uf                      String
  status                  Boolean @default(true)
  feriados                Feriados[]
  staff                   Staff[]
}

model Industrias {
  id                  String @id @map("_id") @default(auto()) @db.ObjectId
  industrias          String
  clientes            Clientes[]
}



// CRUD DE PROJETOS: Classificação de projetos

// Classificação    Natureza        Divisão
// Lei do bem       IRPJ/CSLL       Diretos         


// É a classificação imediata dos projetos
model Classificacao {
  id                        String @id @map("_id") @default(auto()) @db.ObjectId
  classificacao             String

  natureza                  Natureza? @relation(fields: [naturezaId], references: [id])
  naturezaId                String? @db.ObjectId

  propostas                 Propostas[]
}

model Natureza {
  id                        String @id @map("_id") @default(auto()) @db.ObjectId
  natureza                  String

  divisoes                  Divisoes? @relation(fields: [divisoesId], references: [id])
  divisoesId                String? @db.ObjectId

  classificacao             Classificacao[]
}

model Divisoes {
  id                        String @id @map("_id") @default(auto()) @db.ObjectId
  divisoes                  String

  natureza                  Natureza[]

  staff                     Staff[]
}



// Atualização desse arquivo

// CRUD Propostas e Clientes

model Clientes {
  id                  String @id @map("_id") @default(auto()) @db.ObjectId
  nomeDoCliente       String
  codigoCliente       String?
  razaoSocial         String?
  empresaPrincipal    Boolean @default(false)
  cnpj                String?
  grupo               String? @db.ObjectId
  status              Boolean @default(true)
  
  industria           Industrias? @relation(fields: [industriaId], references: [id])
  industriaId         String? @db.ObjectId
  
  fyEntrada           FiscalYears? @relation(fields: [fyEntradaId], references: [id])
  fyEntradaId         String? @db.ObjectId
  
  propostas           Propostas[]
  
  comentarios         String?
}

model OrigensDeProjetos {
  id                  String @id @map("_id") @default(auto()) @db.ObjectId
  origemDeProjetos    String
  propostas           Propostas[]
}


model Propostas {
  id                          String                        @id @map("_id") @default(auto()) @db.ObjectId

  fyEntrada                   FiscalYears?                  @relation(fields: [fyEntradaId], references: [id])
  fyEntradaId                 String?                       @db.ObjectId

  gtbProjeto                  String?              
  projetoInterno              Boolean                       @default(false)
  
  cliente                     Clientes?                     @relation(fields: [clienteId], references: [id])
  clienteId                   String?                       @db.ObjectId
  
  responsavel                 Profissionais?                @relation(fields: [responsavelId], references: [id])
  responsavelId               String?                       @db.ObjectId
  
  totalDeHoras                Int                           @default(0)              
  taxaMedia                   Float                         @default(0.0)
  valorTotal                  Float                         @default(0.0)              
  
  classificacao               Classificacao?                @relation(fields: [classificacaoId], references: [id])
  classificacaoId             String?                       @db.ObjectId
  
  origemDeProjetos            OrigensDeProjetos?            @relation(fields: [origemDeProjetosId], references: [id])
  origemDeProjetosId          String?                       @db.ObjectId
  
  trabalhoNovo                Boolean                       @default(true)
  referencia                  DateTime?                
  comentarios                 String?

  programacao                 Programacao[]
}







// CRUD de Programação

model TipoDeFeriado {
  id                     String      @id @map("_id") @default(auto()) @db.ObjectId
  tipoDoFeriado           String
  feriados Feriados[]
  status  Boolean @default(true)
}

model FiscalYears {
  id                  String @id @map("_id") @default(auto()) @db.ObjectId
  fiscalYear          String
  dataInicial         DateTime
  dataFinal           DateTime
  comentarios         String?
  status              Boolean @default(false)

  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt

  clientes            Clientes[]
  propostas           Propostas[]
}

model Feriados {
  id              String          @id @map("_id") @default(auto()) @db.ObjectId
  nomeDoFeriado   String
  dataDoFeriado   DateTime

  calendarioFixo  Boolean         @default(false)
  
  tipoDeFeriado   TipoDeFeriado?   @relation(fields: [tipoDeFeriadoId], references: [id])
  tipoDeFeriadoId String?          @db.ObjectId
  
  filial          Filiais?        @relation(fields: [filialId], references: [id])
  filialId        String?         @db.ObjectId
  
  comentarios     String?

  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}


model TipoDeEventosPadrao {
  id                            String          @id @map("_id") @default(auto()) @db.ObjectId
  tipoDeEvento                  String
  gtb_padrao                    String
}

model Programacao {
  id                            String          @id @map("_id") @default(auto()) @db.ObjectId
  dataDaAlocacao                DateTime

  proposta                      Propostas       @relation(fields: [propostaId], references: [id])
  propostaId                    String          @db.ObjectId
  
  profissional                  Staff           @relation(fields: [profissionalId], references: [id])
  profissionalId                String          @db.ObjectId
  
  dataSolicitacao               DateTime        @default(now())

  solicitante                   Usuarios        @relation(name: "solicitante", fields: [solicitanteId], references: [id])
  solicitanteId                 String          @db.ObjectId

  dataDaAprovacao               DateTime

  aprovador                     Usuarios        @relation(name: "aprovador", fields: [aprovadorId], references: [id])
  aprovadorId                   String          @db.ObjectId

  status                        Boolean @default(false)

  comentarios                   String

}





// CRUD de Profissionais

model Cargos {
  id                String      @id @map("_id") @default(auto()) @db.ObjectId
  cargo             String
  cargoExecutivo    Boolean @default(false)
  graduacao         Int?
  staff             Staff[]
}

model Profissionais {
  id                        String      @id @map("_id") @default(auto()) @db.ObjectId
  nomeDoProfissional        String
  dataDeNascimento          DateTime?
  email                     String?     @unique
  dataDeEntrada             DateTime?
  dataDeDesligamento        DateTime?
  comentarios               String?
  propostas                 Propostas[]
  staff                     Staff[]
  users                     Users[]
}

model Staff {
  id                        String              @id @map("_id") @default(auto()) @db.ObjectId
  dataDaPromocao            DateTime
  
  profissional              Profissionais       @relation(fields: [profissionaisId], references: [id])
  profissionaisId           String              @db.ObjectId
  
  cargo                     Cargos              @relation(fields: [cargoId], references: [id])
  cargoId                   String              @db.ObjectId
  
  divisao                   Divisoes            @relation(fields: [divisaoId], references: [id])
  divisaoId                 String              @db.ObjectId
  
  filial                    Filiais             @relation(fields: [filialId], references: [id])
  filialId                  String              @db.ObjectId
  
  status                    Boolean
  comentarios               String
  
  programacao               Programacao[]
}

// npx prisma db push                                                                  
// Teste
   